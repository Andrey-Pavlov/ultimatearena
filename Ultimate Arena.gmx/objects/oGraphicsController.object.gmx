<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Map
global.event_count = 0;
global.fighter_place[0] = 0;
global.deadUpdates = 1;
global.otherUpdates = 1;
global.update_count = 0;
global.kill_count = 0;
global.event_kills = 0;

global.mScale = (global.WSCALE*.8) / 500
instance_create(0,0,oSponsorMenu);
draw_set_valign(fa_top);
randomize();
//show_debug_overlay(true);
global.GAME_SPEED = 2;
global.fighters_remaining = global.fighters;
tile_size = 32;
instance_create(0,0,oSignDeaths);
instance_create(0,0,oSideMenu);
map = surface_create(500,500);
realmap = surface_create(750,750);
updates = surface_create(390,74*50);
global.boxColor = 0;
audio_play_sound(snd_outdoor_ambient,0,1);
audio_play_sound(snd_outdoor_ambient2,0,1);
mapSize = 500;
global.mapSize = mapSize;
if (global.arena_events)
    event_timer = floor(random(20000)); 
for(i = 0;i&lt;global.fighters+1;i++)
    global.deadday[i] = "";
//scr_generate_map(256, 64, -.75, 0.3, 0.15, false);

for (i = 0;i &lt; global.waterpools; i++)
{
    instance_create(global.waterloc[i,0],global.waterloc[i,1],oWater);
}
for (i = 0;i &lt; global.trees; i++)
{
    c = instance_create(global.treeloc[i,0],global.treeloc[i,1],oTree);
    c.foodcount = ceil(random(3));
}

for (i = 0;i &lt; global.wood; i++)
{
    instance_create(global.woodloc[i,0],global.woodloc[i,1],oWood);
}
for (i = 0;i &lt; global.rope; i++)
{
    instance_create(global.ropeloc[i,0],global.ropeloc[i,1],oRope);
}
for (i = 0;i &lt; global.stone; i++)
{
    instance_create(global.stoneloc[i,0],global.stoneloc[i,1],oStone);
}

for (i = 1;i &lt; global.fighters +1; i++)
{ 
    c = instance_create(0,0,oFighter);
    c.fighterID = i;
    global.IDLIST[i] = c;
    
    
    c.NAME = global.NAMES[i];
}    

if(global.landmines)
{
    for (i = 0;i &lt; 12; i++) 
        instance_create(floor(random(460))+20,floor(random(460))+20,oMine);
}



with(zui_main())
{
    create_window_map();
    create_window_updates();
        
    test22();
    
        /*with(zui_create(5,__height - 45,objUIButton))
        {
            zui_set_anchor(0,0);
            caption = "Death Updates On";
            bID = 10;
            type = 3;
            zui_set_size(186,40);
            callback = arena_ui;
        }
        with(zui_create(__width - 5,__height - 45,objUIButton))
        {
            zui_set_anchor(1,0);
            caption = "Other Updates On";
            bID = 9;
            type = 3;
            zui_set_size(186,40);
            callback = arena_ui;
        }*/
    
    with(zui_create(71,display_get_gui_height()/2,objUIWindow,-1))
    {
        wID = "Stats";
        callback = arena_ui;
        zui_set_size(140,524);
        with(zui_create(0,0,objUIWindowCaption))
        {
            caption = "Stats";
            draggable = 1;
        }
        zui_create(0,0,oUIExitButton);
    
    
    }
    /*with(zui_create(800,348,objUIWindow,-1))
    {
    
        if (global.GAMETYPE == 0)
        {
        wID = "Sandbox";
        callback = arena_ui;
        zui_set_size(140,524);
        with(zui_create(0,0,objUIWindowCaption))
        {
            caption = "Sandbox";
            draggable = 1;
        }
        with(zui_create(70,151,oUIImageButton,-1))
        {
            zui_set_size(90,90);
            image = sSandboxButton;
            callback = arena_ui;
            bID = 11;
        }
        with(zui_create(70,289,oUIImageButton,-1))
        {
            zui_set_size(90,90);
            image = sSandboxButton;
            callback = arena_ui;
            bID = 12;
        }
        with(zui_create(70,429,oUIImageButton,-1))
        {
            zui_set_size(90,90);
            image = sSandboxButton;
            callback = arena_ui;
            bID = 13;
        }
        }
        else if (global.GAMETYPE == 1)
        {
        wID = "Sponsor Menu";
        callback = arena_ui;
        zui_set_size(140,524);
        with(zui_create(0,0,objUIWindowCaption))
        {
            caption = "Sponsor";
            draggable = 1;
        }
        }
        zui_create(0,0,oUIExitButton);
    
    
    }
    /* I don't remember what the fuck this does
    for(i = 1;i &lt; 10;i++)
    {
        with(zui_create(40+other.i*40,400,oUIImageButton,-1))
        {
        zui_set_size(40,40);
        image = global.IMAGES[other.i];
        //colortype = 3;
        }
    
    }*/



}

alarm[0] = global.GAME_SPEED;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text Controller



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_timer--;

if(event_timer == 0 &amp;&amp; !instance_exists(oArenaEvent))
{
    var event = floor(random(global.EVENT_COUNT));
    s = instance_create(0,0,oArenaEvent);
    s.event = event;
    s.alarm[0] = global.GAME_SPEED;
    global.event_count++;
    
    ini_open("events/" + global.EVENT[event]);
    s.description = ini_read_string("event","description","ERROR");
    s.name = ini_read_string("event","name","ERROR");
    s.death_percentage = ini_read_real("event","death_percentage",0);
    ini_close();
    


}

alarm[0] = global.GAME_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_map();
draw_updates();

if (alarm[0] == -1 &amp;&amp; global.GAME_SPEED &gt; 0)
{

    alarm[0] = global.GAME_SPEED;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_rectangle_colour(0,0,100,499,c_0,c_0,c_0,c_0,0);
draw_rectangle_colour(100,0,600,500,c_0,c_0,c_0,c_0,false);
draw_rectangle_colour(600,0,950,500,c_0,c_0,c_0,c_0,false);
draw_rectangle_colour(950,0,960,500,c_maroon,c_maroon,c_gray,c_gray,false);
//draw_rectangle_colour(0,500,960,520,c_olive,c_olive,c_gray,c_gray,false);
draw_rectangle_colour(0,520,960,540,c_olive,c_olive,c_gray,c_gray,false); */

//draw_rectangle_colour(0,0,room_width,room_height,c_0,c_0,c_0,c_0,0);


//draw_surface(updates,890,0);
//draw_surface(oSideMenu.sidemenu,50,110);
//draw_surface(oSponsorMenu.sponsormenu,750,110);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
